output$shapiroP <- renderUI({
ns <- session$ns
sliderInput("shapiroP", "Shapiro-Wilk Univariate Normality Test p-value:", value = 0.05, min = 0.001, max = 1, step = 0.01)
})
# sliderinput for corrplot R threshold
output$corR <- renderUI({
sliderInput("corR", "R2", value = 0.6, min = 0, max = 0.99, step = 0.1, animate = F)
})
selcCor <- reactive ({
input$slcR
})
output$applyCor <- renderUI ({
actionButton('applyCor', 'Apply corrections')
})
convOptions <- eventReactive(input$applyCor, {
datas <- DT_p2 ()
datas <- corect.func(as.data.frame(datas), input$corR, input$shapiroP,input$slcC, input$slcR )
datas <- datas[, -which(names(datas) %in% c("formula"))]
colnames(datas)[5] <- "Formula"
datas[, 5] <- (gsub("I(datas$", replacement = "(", datas[, 5], fixed = T))
datas[, 5] <- (gsub("datas$", replacement = "", datas[, 5], fixed = T))
datas[, 5] <- (gsub("I", replacement = "", datas[, 5], fixed = T))
datas[, 5] <- (gsub("logI", replacement = "log", datas[, 5], fixed = T))
datas
if (!is.null(datas)) {
datas
} else {
}
})
output$convOptions <- renderDT({
convOptions ()
})
fDt  <- reactive ({
dat <- convOptions ()
dat$id <- seq(1, nrow(dat))
valTable <- dat
varr <- valTable %>% group_by(source, element)
f <- varr %>% arrange(-desc(residualsSD), desc(Cooks), .by_group = TRUE)
f <- f %>%
group_by(source, element) %>%
mutate(rank = rank(-desc(residualsSD), ties.method = "first"))
f <- f[, -which(names(f) %in% c("formula", "grade", "Cooks", "residualsSD", "p-eq", "p-resi"))]
f <- as.data.frame(f)
f[, 3] <- (gsub("I(datas$", replacement = "(", f[, 3], fixed = T))
f[, 3] <- (gsub("datas$", replacement = "", f[, 3], fixed = T))
f[, 3] <- (gsub("I", replacement = "", f[, 3], fixed = T))
f[, 3] <- (gsub("logI", replacement = "log", f[, 3], fixed = T))
f[, 3] <- as.factor(f[, 3])
return (f)
})
output$fDt <- renderDT({
if (!is.null(fDt())){
datatable(fDt (), filter = "top", options = list(
pageLength = 10, autoWidth = TRUE
))
} else {}
})
selectPick <- reactive({
#print (fDt[input$fDt_rows_selected,])
fDt()[input$fDt_rows_selected, ]
})
# observe rows selected
output$selDat <- renderUI({
radioButtons(
"selDat", "Select data :",
c(
"Top rank" = "def",
"User choice" = "sel"
)
)
})
output$selectPick <- renderDT({
datatable(selectPick(), filter = "top", options = list(
pageLength = 5, autoWidth = F
))
})
output$topPick <- renderDT({
datatable(topPick(), filter = "top", options = list(
pageLength = 5, autoWidth = F
))
})
topPick <- reactive({
dat <- fDt ()
datas <- dat[which(dat$rank == 1), ]
})
output$selVarplot <- renderUI({
#print (fDt()[which(fDt()$rank == 1),])
if (!is.null(input$selDat)) {
if (input$selDat == "def") {
selectInput("selVarplot", label = "Select Element", choices = fDt()[which(fDt()$rank == 1), 3])
} else {
selectInput("selVarplot", label = "Select Element", choices = fDt()[input$fDt_rows_selected, 3])
}
} else {}
})
#callModule (corrAnalysis, 'dat1', DT_p2(),TTout(), convOptions ())
# regressions plot function
regPlotfunc <- reactive({
req(topPick())
# req (input$selVarplot)
datas <- DT_p2 ()
# print (input$selDat)
if (!is.null(input$selDat)) {
if (input$selDat == "def") {
if (!is.null(input$selVarplot)) {
sclass <- topPick()[which(topPick()[, 3] == input$selVarplot), 4]
sclass <- as.character(sclass)
datas <- datas[which(datas[, 2] == sclass), ]
} else {}
} else {
if (!is.null(input$selVarplot)) {
sclass <- selectPick()[which(selectPick()[, 3] == input$selVarplot), 4]
sclass <- as.character(sclass)
datas <- datas[which(datas[, 2] == sclass), ]
datas
} else {}
}
}
#print (datas)
datas
})
# regressions plot output
output$regPlot <- renderPlot({
#req(input$selDat)
#req(input$selVarplot)
#req(regPlotfunc())
#req(slcC)
dats <- NULL
print (input$slcC)
print (input$selDat)
#not working, fix it
print (selectPick())
print (regPlotfunc())
#not working
#slcC <- input$slcC
dats <- selectPick ()
slcC <- input$slcC
if (dim(dats)[1] < 1 & input$selDat == "sel") {} else {
datas <- regPlotfunc()
if (length(slcC) > 1) {
var1 <- as.numeric(datas[, slcC[1]])
var2 <- as.numeric(datas[, slcC[2]])
} else {
var1 <- as.numeric(datas[, slcC])
var2 <- NULL
}
datas[, 3:dim(datas)[2]] <- apply(datas[, 3:dim(datas)[2]], 2, as.numeric)
f <- input$selVarplot
f <- sub("^.", "I(datas$", f)
f <- sub("(var1", "I(var1", f, fixed = T)
f <- sub("(var2", "I(var2", f, fixed = T)
f <- sub("logI", "log", f, fixed = T)
f <- sub("I(datas$og(", "log(datas$", f, fixed = T)
fit <- lm(eval(parse(text = f)))
par(mfrow = c(1, 3))
cooksd <- cooks.distance(fit)
plot(cooksd, cex = 2, main = "Influential Obs by Cooks distance")
lines(lowess(cooksd), col = "blue")
plot(fitted(fit), residuals(fit))
lines(lowess(fitted(fit), residuals(fit)))
title("Residual vs Fit. value ", col = "red")
acf(residuals(fit), main = "")
title("Residual Autocorrelation Plot")
}
})
}
# User interface side of the user input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "SedSat_ShinyV2"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "dataInput", icon = icon("upload")),
menuItem("Size & TOC Correction", tabName = "regressions", icon = icon("random")),
menuItem("Discriminant Function Analysis", tabName = "DFA", icon = icon("table")),
menuItem("Mixing Model", tabName = "mixmod", icon = icon("cubes")) # ,
# menuItem("ML Model", tabName = "mlmod", icon = icon("circle"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
tabsetPanel(
tabPanel(
"Source",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file1", "User data (.csv format)"),
columnChooserUI("dat1")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("DT"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat1")
),
column(
width = 3,
mat_par("dat1")
),
column(
width = 12,
br(),
srcDCor("dat1")
)
)
)
)
)
)
)
),
tabsetPanel(
tabPanel(
"Original Data p-values",
box(
title = textOutput("origTitle"), status = "success", height = "630", width = 12, solidHeader = T,
column(
width = 12,
srcSP("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"Transformations Advanced",
tabsetPanel(
tabPanel(
"Methods",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspMethods("dat1"),
style = "height:550px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Transformed p-values",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspPval("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"QQ Plots",
box(
title = "QQ plot of Original Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
spPlotpick("dat1")
),
getorigQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;",
column(
width = 6
)
),
box(
title = "QQ plot of Transformed Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
shapiroP("dat1")
),
getspQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;", # 570
column(
width = 6
)
)
)
)
),
tabPanel(
"Outliers",
fluidPage(
fluidRow(
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
downloadButton("downloadData", "Download"),
br(),
tags$hr(),
outliersTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
),
tabPanel(
"Outliers Advanced",
tabsetPanel(
tabPanel(
"Transformed Data & Outliers",
box(
title = "Data: Transformed ", status = "warning", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Edit Table To Keep/Remove Outliers",
box(
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: green;}")),
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-grid-text { font-size: 10pt;}")),
nStd("dat1"),
title = "Select Or Deselect Rows ", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab2("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
box(
title = "Standard Normal Deviate", status = "success", height = "600", width = 12, solideHeader = T,
column(
width = 12,
stdTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Outliers Removed",
box(
title = "These Rows Will Be Excluded From Final Output ", status = "danger", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab3("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Final Output",
box(
title = "Final Output Table", status = "success", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
br(),
downloadButton("downloadData2", "Download"),
tags$hr(),
outliersADtab4("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
),
tabPanel(
"Target",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file2", "User data (.csv format)"),
columnChooserUI("dat2")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("TD"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat2")
),
column(
width = 3,
mat_par("dat2")
),
column(
width = 12,
br(),
srcDCor("dat2")
)
)
)
)
)
)
)
)
)
)
)
),
tabItem( # First tab content
tabName = "regressions",
tabsetPanel(
tabPanel(
"Sources",
column(
width = 12,
DTOutput("DT_p2")
)
),
tabPanel(
"Target",
column(
width = 12,
DTOutput("TD_p2")
)
),
tabPanel(
'Corrections',
column(
width = 12,
uiOutput ('selcCor'),#,
uiOutput ('selcRem'),
uiOutput ('shapiroP'),
uiOutput ('corR'),
uiOutput ('applyCor'),
withSpinner(DTOutput ('convOptions'))
)
),
tabPanel(
'Target corrected',
fluidRow (
column(
width = 6,
DTOutput('fDt')
),
column (
width =6,
uiOutput ('selDat'),
uiOutput ('selVarplot'),
plotOutput('regPlot')
),
column (
width =12
)
),
fluidRow (
column (
width =6,
DTOutput ('topPick')
),
column (
width =6
)
)
)
)
)
),
tabItems(
tabItem( # First tab content
tabName = "DFA",
tabsetPanel()
)
),
tabItems(
tabItem( # First tab content
tabName = "mixmod",
tabsetPanel()
)
)
)
)
# Run the app ----
shinyApp(ui, server)
setwd("~/Shiny_V2")
