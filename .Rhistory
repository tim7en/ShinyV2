})
output$dat_missing_adj <- renderUI ({
selectInput("missing_adj", "Fill", choices = c('mean', 'median', 'single impute', 'multiple impute'), selected = NULL, multiple = TRUE)
})
output$dat_zero_text <- renderUI ({
textInput('zer_text', 'Input equation')
})
output$dat_levels <- renderUI({
col_indx <- which(names(dat_rv$dtab) == input$facts)
selectInput("flevels", "Levels", choices = levels(dat_rv$dtab[, col_indx]), multiple = TRUE, selected = FALSE)
})
output$new_levels <- renderUI({
textInput("new_names", "Names")
})
output$accept_revalue <- renderUI({
actionButton("accept_revalue1", "Accept")
})
dat_levels_rename <- eventReactive(input$accept_revalue1, {
col_indx <- which(names(dat_rv$dtab) == input$facts)
new_names <- try(unlist(strsplit(input$new_names, ",")))
if ((length(input$flevels) == 1) && (length(new_names) == 1)) {
dat_rv$dtab[, col_indx] <- mapvalues(dat_rv$dtab[, col_indx], from = c(input$flevels), to = c(new_names))
} else if ((length(input$flevels) > 1) && (length(new_names) == 1)) {
new_names <- rep(new_names, length(input$flevels))
dat_rv$dtab[, col_indx] <- mapvalues(dat_rv$dtab[, col_indx], from = c(input$flevels), to = c(new_names))
} else if ((length(input$flevels) > 1) && (length(new_names) > 1)) {
if (length(input$flevels) < length(new_names)) {
NULL
} else {
dat_rv$dtab[, col_indx] <- mapvalues(dat_rv$dtab[, col_indx], from = c(input$flevels), to = c(new_names))
}
}
dat_rv$dtab
})
observeEvent(input$accept_revalue1, {
output$dat_levels_dt <- renderDT({
dat_levels_rename()
dat_rv$dtab
})
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
library(plyr)
library(shinydashboard)
library (zCompositions)
# checks for negatives
is.negative <- function(x) {
options(warn = -1)
x <- try(as.numeric(x))
if ((is.numeric(x) || is.integer(x))) {
return(length(which(na.omit(x) < 0)))
} else {
return(NULL)
}
options(warn = 1)
}
# checks for zeros
is.zero <- function(x) {
options(warn = -1)
x <- try(as.numeric(x))
if ((is.numeric(x) || is.integer(x))) {
return(length(which(x == 0)))
} else {
return(NULL)
}
options(warn = 1)
}
# read in the data table
x <- read.csv("SourceData.csv")
# function to output summary table
dfSummary <- function(x) {
tabSummary <- NULL
tabSummary <- rbind(tabSummary, sapply(x, function(x) class(x)))
tabSummary <- rbind(tabSummary, sapply(x, function(x) sum(is.na(x))))
tabSummary <- rbind(tabSummary, sapply(x, function(x) nlevels(x)))
tabSummary <- rbind(tabSummary, apply(x, 2, is.negative))
tabSummary <- rbind(tabSummary, apply(x, 2, is.zero))
tabSummary
}
# summary table
dat <- dfSummary(x)
dat <- as.data.frame(dat)
rownames(dat) <- c("Type", "NAs", "Unique", "Negative", "Zeros")
# 3 columns, first column is selection available of columns with factors
# factors available in the selected column
# select column - rename with the name in the 3rd column, use apply and then reset
# column where 0 found, if there is a zero, warn
# column where negative found, if there is a negative, warn
# if it is missing, ask replace with mean ? , median ? or keep it and remove with outliers
# match source and target column names
# define UI for app that draws a histogram ----
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
tabsetPanel(
tabPanel(
"Factors",
uiOutput("dat_facts"),
uiOutput("dat_levels"),
uiOutput("new_levels"),
uiOutput("accept_revalue")
),
tabPanel(
"Negatives",
uiOutput ('dat_negatives'),
uiOutput ('dat_neg_text')
),
tabPanel(
"Zeros",
uiOutput ('dat_zeros'),
uiOutput ('dat_zero_text')
),
tabPanel(
'Missing',
uiOutput ('dat_missing'),
uiOutput ('dat_missing_sub'),
uiOutput ('dat_missing_adj')
)
)
),
dashboardBody(
tabsetPanel(
tabPanel(
"Summary",
box(
title = "Summary table", status = "danger", height = "630", width = 12, solidHeader = T,
DTOutput(outputId = "distTable"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll"
)
),
tabPanel(
"Data",
box(
width = 12,
title = "Data table", solidHeader = TRUE, status = "primary",
DTOutput("dat_levels_dt"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
dat_rv <- reactiveValues(dtab = x)
dat_rv_sum <- reactiveValues (dtab = dat)
output$distTable <- renderDT({
dat_rv_sum$dtab
})
output$dat_facts <- renderUI({
selectInput("facts", "Factors", choices = colnames(dat)[which(as.numeric(as.matrix(dat[3, ])) > 0)], selected = NULL)
})
output$dat_negatives <- renderUI ({
selectInput("negts", "Negatives", choices = colnames(dat)[which(as.numeric(as.matrix(dat[4, ])) > 0)], selected = NULL, multiple = TRUE)
})
output$dat_neg_text <- renderUI ({
textInput('neg_text', 'Input equation')
})
output$dat_zeros <- renderUI ({
selectInput("zeros", "Zeros", choices = colnames(dat)[which(as.numeric(as.matrix(dat[5, ])) > 0)], selected = NULL, multiple = TRUE)
})
output$dat_missing <- renderUI ({
selectInput("missing", "Missing", choices = colnames(dat)[which(as.numeric(as.matrix(dat[2, ])) > 0)], selected = NULL, multiple = TRUE)
})
output$dat_missing_sub <- renderUI ({
col_indx <- which(names(dat_rv$dtab) == input$facts)
selectInput("missing_lvl", "Levels", choices = levels(dat_rv$dtab[, col_indx]), multiple = TRUE, selected = FALSE)
})
output$dat_missing_adj <- renderUI ({
selectInput("missing_adj", "Fill", choices = c('mean', 'median', 'single impute', 'multiple impute'), selected = NULL, multiple = TRUE)
})
output$dat_zero_text <- renderUI ({
textInput('zer_text', 'Input equation')
})
output$dat_levels <- renderUI({
col_indx <- which(names(dat_rv$dtab) == input$facts)
selectInput("flevels", "Levels", choices = levels(dat_rv$dtab[, col_indx]), multiple = TRUE, selected = FALSE)
})
output$new_levels <- renderUI({
textInput("new_names", "Names")
})
output$accept_revalue <- renderUI({
actionButton("accept_revalue1", "Accept")
})
dat_levels_rename <- eventReactive(input$accept_revalue1, {
col_indx <- which(names(dat_rv$dtab) == input$facts)
new_names <- try(unlist(strsplit(input$new_names, ",")))
if ((length(input$flevels) == 1) && (length(new_names) == 1)) {
dat_rv$dtab[, col_indx] <- mapvalues(dat_rv$dtab[, col_indx], from = c(input$flevels), to = c(new_names))
} else if ((length(input$flevels) > 1) && (length(new_names) == 1)) {
new_names <- rep(new_names, length(input$flevels))
dat_rv$dtab[, col_indx] <- mapvalues(dat_rv$dtab[, col_indx], from = c(input$flevels), to = c(new_names))
} else if ((length(input$flevels) > 1) && (length(new_names) > 1)) {
if (length(input$flevels) < length(new_names)) {
NULL
} else {
dat_rv$dtab[, col_indx] <- mapvalues(dat_rv$dtab[, col_indx], from = c(input$flevels), to = c(new_names))
}
}
dat_rv$dtab
})
observeEvent(input$accept_revalue1, {
output$dat_levels_dt <- renderDT({
dat_levels_rename()
dat_rv$dtab
})
})
}
shinyApp(ui, server)
?lrem
library (zCompositions)
?lrEM
styler:::style_active_file()
x
#Define dimentions of the input data
D<-dim (x)
D
#Create matrix that will store detection limits
mdl <- data.frame(matrix(0,ncol=D[2],nrow=D[1]))
mdl
#Get column names and transfer names to the matrix
Df_names<-names(x)
colnames(mdl)<-Df_names[1:length(Df_names)]
Df_names
mdl
#Create data frame to store detection limits and values
Dl<-data.frame(Df_names[1:46])
colnames(Dl)<-NULL
colnames(Dl)<-"Elements"
D1
D1
Dl
#Define elements names and detection limits corresponding to elements
Dl$Elements<-c("Al","As","Ba","Be","Bi","C_tot", "C_ing", "C_org",
"Ca","Cd","Ce","Co","Cr","Cs", "Cu","Fe","Ga",
"Hg","In","K","La","Li","Mg","Mn","Mo","Na","Nb",
"Ni","P","Pb","Rb","S","Sb","Sc","Se","Sn","Sr","Te", "Th",
"Ti","Tl","U","V","W","Y","Zn")
Dl$DetLim<-c(0.01,0.06,5,0.01,0.04,0.04,0.2,0,0.01,0.1,0.05,0.1,1,5,0.5,0.01,0.08,0.01,0.02,
0.01,0.5,1,0.01,5,0.05,0.01,0.1,0.5,50,0.5,0.2,0.01,0.05,0.1,0.2,0.1,0.5,
0.1,0.2,0.01,0.1,0.1,1,0.1,0.2,1)
Dl
#Covariance matrix with corresponding detection limits;
for (i in seq (1:46)){
mdl[which(colnames(mdl) == Dl$Elements[i])]<-Dl$DetLim[i]
}
mdl
#Create matrix from original values
Input_x_mat<-x
Input_x_mat[] <- lapply(Input_x_mat, function(x) as.numeric(as.character(x)))
Input_x_mat
#Create vector that will store names of elements to drop from matrix
drops<-array(0,46)
drops
#Finds the column with number of observations less then 60% of total observations and keeps the name of this column
for (i in seq (1:dim(Input_x_mat)[2])){
if ((length(which(is.na(Input_x_mat[,i]))=="True"))/nrow(Input_x_mat)>0.6)
{drops[i]<-colnames(Input_x_mat)[i]}
}
drops
#Get all columns except the one that was dropped
Input_x_mat<-Input_x_mat[ , !(colnames(Input_x_mat) %in% drops)]
mdl<-mdl[ , !(colnames(mdl) %in% drops)]
mdl
#Replace all NA with 0
Input_x_mat[is.na(Input_x_mat)]<-0
Input_x_mat[]<-lapply(Input_x_mat,function(x) as.numeric(x))
Input_x_mat<-as.matrix(Input_x_mat)
mdl<-as.matrix(mdl)
Input_x_mm
Input_x_mat
mdl
Input_x_mat
View(Input_x_mat)
dl
mdl
?lrEM
dk
dl
Dl
Dl[,2]
#Impute data using z-composition package
Input_x_lrEM <- lrEM(Input_x_mat,label=0,dl=Dl[,2],ini.cov="multRepl")
mdl
dl
match (names(Dl))
match (names(Dl), names (mdl))
match (colnames(Dl), colnames (mdl))
colnames(Dl)
colnames(Dl[,1])
match (Dl[,1], colnames(mdl))
match (Dl[,1], names(mdl))
names (mdl)
colnames (mdl)
Dl[,1]
Dk
Dl
Dl
length (names(mdl))
length (colnames(mdl))
cbind (colnames(mdl), sample(Dl$DetLim, length(colnames(mdl))))
datF <- cbind (colnames(mdl), sample(Dl$DetLim, length(colnames(mdl))))
datF
datF[,2] <- as.numeric(datF)
datF[,2]
as.numeric(datF[,2])
datF[,2] <- as.numeric(datF[,2])
datF
datF <- as.data.frame (datF)
datF
match (colnames(Input_x_mat),datF[1])
colnames (Input_x_mat)
match (colnames(Input_x_mat),datF[,1])
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])] <- datF[,2]
Input_x_mat
datF
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])]
Input_x_mat
match (colnames(Input_x_mat),datF[,1])
datF[,2]
datF[,2] <- as.numeric(datF[,2])
datF
datF[,2]
datF[,match (colnames(Input_x_mat),datF[,1])]
datF[,match (colnames(Input_x_mat),datF[,1])]
match (colnames(Input_x_mat),datF[,1])
match (colnames(Input_x_mat),datF[,1])
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])]
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])] <- datF[match (colnames(Input_x_mat),datF[,1]),2]
Input_x_mat
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])] <- datF[match (colnames(Input_x_mat),datF[,1]),2]
match (colnames(Input_x_mat),datF[,1])
datF[,2]
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])] <- datF[,2][match (colnames(Input_x_mat),datF[,1])]
Input_x_mat
datF[,2][match (colnames(Input_x_mat),datF[,1])]
datF[,2][1]
Input_x_mat[,match (colnames(Input_x_mat),datF[,1])] <- datF[,2][match (colnames(Input_x_mat),datF[,1])]
Input_x_mat
for (i in  seq (1, ncol(Input_x_mat))){
ind <- which (colnames(Input_x_mat))[i] == datF[,1][i]
Input_x_mat[,i] <- datF[,2][i]
}
for (i in  seq (1, ncol(Input_x_mat))){
ind <- which (colnames(Input_x_mat)[i] == datF[,1][i])
Input_x_mat[,i] <- datF[,2][i]
}
Input_x_mat
#Impute data using z-composition package
Input_x_lrEM <- lrEM(Input_x_mat,label=0,dl=mdl,ini.cov="multRepl")
Input_x_mat
mdl
colnames (mdl)
#Define dimentions of the input data
D<-dim (x)
#Create matrix that will store detection limits
mdl <- data.frame(matrix(0,ncol=D[2],nrow=D[1]))
#Get column names and transfer names to the matrix
Df_names<-names(x)
colnames(mdl)<-Df_names[1:length(Df_names)]
#Create data frame to store detection limits and values
Dl<-data.frame(Df_names[1:46])
colnames(Dl)<-NULL
colnames(Dl)<-"Elements"
#Define elements names and detection limits corresponding to elements
Dl$Elements<-c("Al","As","Ba","Be","Bi","C_tot", "C_ing", "C_org",
"Ca","Cd","Ce","Co","Cr","Cs", "Cu","Fe","Ga",
"Hg","In","K","La","Li","Mg","Mn","Mo","Na","Nb",
"Ni","P","Pb","Rb","S","Sb","Sc","Se","Sn","Sr","Te", "Th",
"Ti","Tl","U","V","W","Y","Zn")
Dl$DetLim<-c(0.01,0.06,5,0.01,0.04,0.04,0.2,0,0.01,0.1,0.05,0.1,1,5,0.5,0.01,0.08,0.01,0.02,
0.01,0.5,1,0.01,5,0.05,0.01,0.1,0.5,50,0.5,0.2,0.01,0.05,0.1,0.2,0.1,0.5,
0.1,0.2,0.01,0.1,0.1,1,0.1,0.2,1)
#Covariance matrix with corresponding detection limits;
for (i in seq (1:46)){
mdl[which(colnames(mdl) == Dl$Elements[i])]<-Dl$DetLim[i]
}
#Create matrix from original values
Input_x_mat<-x
Input_x_mat[] <- lapply(Input_x_mat, function(x) as.numeric(as.character(x)))
#Create vector that will store names of elements to drop from matrix
drops<-array(0,46)
#Finds the column with number of observations less then 60% of total observations and keeps the name of this column
for (i in seq (1:dim(Input_x_mat)[2])){
if ((length(which(is.na(Input_x_mat[,i]))=="True"))/nrow(Input_x_mat)>0.6)
{drops[i]<-colnames(Input_x_mat)[i]}
}
#Get all columns except the one that was dropped
Input_x_mat<-Input_x_mat[ , !(colnames(Input_x_mat) %in% drops)]
mdl<-mdl[ , !(colnames(mdl) %in% drops)]
#Replace all NA with 0
Input_x_mat[is.na(Input_x_mat)]<-0
Input_x_mat[]<-lapply(Input_x_mat,function(x) as.numeric(x))
Input_x_mat<-as.matrix(Input_x_mat)
mdl<-as.matrix(mdl)
datF <- cbind (colnames(mdl), sample(Dl$DetLim, length(colnames(mdl))))
datF[,2] <- as.numeric(datF[,2])
datF <- as.data.frame (datF)
#match (colnames(mdl),datF[,1])
datF[,2] <- as.numeric(datF[,2])
#Input_x_mat[,match (colnames(Input_x_mat),datF[,1])] <- datF[,2][match (colnames(Input_x_mat),datF[,1])]
for (i in  seq (1, ncol(mdl))){
ind <- which (colnames(mdl)[i] == datF[,1][i])
mdl[,i] <- datF[,2][i]
}
mdl
Input_x_mat
mdl <- as.matrix(mdl)
mdl
#Impute data using z-composition package
Input_x_lrEM <- lrEM(Input_x_mat,label=0,dl=mdl,ini.cov="multRepl")
mdl
lrEM (Input_x_mat, label = 0, mdl)
lrEM (Input_x_mat, label = 0, mdl, ini.cov = 'multRepl')
lrEM (Input_x_mat, label = 0, mdl, ini.cov = 'multRepl')
lrEM (Input_x_mat, label = 0, mdl, ini.cov = 'multRepl', max.iter = 50)
Input_x_mat
lrEM (Input_x_mat, label = 0.00, mdl, ini.cov = 'multRepl', max.iter = 50)
lrEM()
lrEM
lrEM (Input_x_mat, label = 0.00, mdl, ini.cov = 'multRepl', max.iter = 50)
lrEM (Input_x_mat, label = 0., mdl, ini.cov = 'multRepl', max.iter = 50)
lrEM (X = Input_x_mat, label = 0, dl = mdl, ini.cov = 'multRepl', max.iter = 50)
lrEM (X = Input_x_mat, label = 0, dl = mdl, ini.cov = 'multRepl', max.iter = 50, tolerance = 0.001)
?zCompositions
library ('zCompositions')
X <- matrix(c(26.91,8.08,12.59,31.58,6.45,14.39,
39.73,26.20,0.00,15.22,6.80,12.05,
10.76,31.36,7.10,12.74,31.34,6.70,
10.85,46.40,31.89,10.86,0.00,0.00,
7.57,11.35,30.24,6.39,13.65,30.80,
38.09,7.62,23.68,9.70,20.91,0.00,
27.67,7.15,13.05,32.04,6.54,13.55,
44.41,15.04,7.95,0.00,10.82,21.78,
11.50,30.33,6.85,13.92,30.82,6.58,
19.04,42.59,0.00,38.37,0.00,0.00),byrow=TRUE,ncol=6)
X
dl=rep(1,6)
dl
X_lrEM <- lrEM(X,label=0,dl=rep(1,6),ini.cov="multRepl")
x
x
x[x==NA] <- 0
x
x[is.na(x)] <- 0
x
x <- x[,-c(1,2)]
x
ncol (x)
qnorm(1,2)
qnorm(1,0.1)
rnorm(1,0.1)
v <- rep (qnorm(1,2), ncol(x))
v
v <- rep (rnorm(1,2), ncol(x))
v
x
v
?rnorm
v <- rep (rnorm(1,2))
v
?rep
(rnorm(6,2), ncol(x))
rnorm(6,2)
(rnorm(ncol(x),2), )
ncol(x)
rnorm(ncol(x),2)
v <- rnorm(ncol(x),2)
x_lrEM <- lrEM (x, label = 0, dl = v, ini.cov = 'multRepl')
dl
x
class (x)
class (X)
x_lrEM <- lrEM (as.matrix(x), label = 0, dl = v, ini.cov = 'multRepl')
dl=rep(1,6)
dl
length (dl)
ncol (X)
X
nrow (X)
x <- as.matrix(x)
x
X
colnames(x) <- NULL
x
dim (x)
x_lrEM <- lrEM (as.matrix(x), label = 0, dl = v, ini.cov = 'multRepl')
X <- x
X_lrEM <- lrEM(X,label=0,dl=v,ini.cov="multRepl")
dl=rep(1,6)
dl
dl <- rnorm(ncol(x),2)
dl
dl <- rnorm(ncol(x),0.2)
dl
dl <- rnorm(ncol(x),05)
dl
dl <- rnorm(ncol(x),3)
dl
x_lrEM <- lrEM (as.matrix(x), label = 0, dl = dl, ini.cov = 'multRepl')
x
x[x>0]
x[x<0] <- abs(x[x<0])
x
dl
length (cl)
length (dl)
ncol (x)
x_lrEM <- lrEM (as.matrix(x), label = 0, dl = dl, ini.cov = 'multRepl')
x_lrEM
