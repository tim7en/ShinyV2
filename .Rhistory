width = 3,
mat_par("dat2")
)
),
column(
width = 12,
br(),
srcDCor("dat2")
)
)
)
)
)
)
)
)
)
)
),
tabItem( # First tab content
tabName = "regressions",
tabsetPanel(
tabPanel(
"Sources",
column(
width = 12,
DTOutput("DT_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Target",
column(
width = 12,
DTOutput("TD_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Corrections",
sidebarLayout(
sidebarPanel(
uiOutput("selcCor"), # ,
uiOutput("selcRem"),
uiOutput("shapiroP"),
uiOutput("corR"),
uiOutput("applyCor")
),
mainPanel(
box(
title = "Available options", status = "success", height =
"auto", solidHeader = T, width = "auto",
withSpinner(DTOutput("convOptions")), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabPanel(
"Target corrected",
fluidRow(
column(
width = 12,
box(
title = "Formulas", status = "success", height =
"auto", solidHeader = T,
DTOutput("fDt"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Selected", status = "primary", height =
"auto", solidHeader = T,
DTOutput("finalDtrg"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
column(
width = 12,
box(
title = "Top pick", status = "success", height =
"auto", solidHeader = T,
DTOutput("topPick"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Plots", status = "success", height =
"auto", solidHeader = T,
uiOutput("selDat"),
uiOutput("selVarplot"),
plotOutput("regPlot")
)
)
)
),
tabPanel(
"Corrected Data",
tabsetPanel(
tabPanel(
"Data",
fluidRow(
column(
width = 12,
uiOutput("trgS"),
DTOutput("tabList"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column(
width = 6,
DTOutput("tabLslopes"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column(
width = 6,
DTOutput("tabLdrops"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Plot",
uiOutput("xvar"),
uiOutput("yvar"),
scatterD3Output("scatterplot1")
)
)
),
tabPanel(
"Bracket test",
fluidPage(
uiOutput("brack_range"),
sidebarLayout(
sidebarPanel(
DTOutput("trg.drops"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
# shinyTree("tree",
#   checkbox = TRUE, search = TRUE, theme = "proton", themeIcons = F,
#   themeDots = F
# ),
# uiOutput('treeAcc')
),
mainPanel(
DTOutput("trgBrkts"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)#,
#DTOutput("trg.drops")
)
)
),
tabItem(
tabName = "DFA",
fluidPage(
fluidRow(
column(
width = 12,
withSpinner(DTOutput("dfaList")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabItem(
tabName = "mixmod",
fluidPage(
fluidRow(
column(
width = 12,
uiOutput ('applyMix'),
uiOutput ('split'),
numericInput("mcsimulations", "Monte carlo simulations:", 2, min = 1, max = 1000),
withSpinner(DTOutput("mixingOutput")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
# Run the app ----
shinyApp(ui, server)
write.csv (dat, 'dat.csv')
dat
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
dat
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
targetsV <- aggregate (targets[,(ncol(targets)-3)],  by = list (targets$Target), mean)
dat
rownames (dat)
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
targetsV <- aggregate (targets[,(ncol(targets)-3)],  by = list (targets$Target), mean)
tdat<- mixedsort(targetsV[,1])
targetsV <- targetsV[match (tdat, targetsV[,1]),]
targetsCi <- aggregate (targets[,1:4],  by = list (targets$Target), ci)
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
rownames (targetsCi) <- NULL
targetsCi
barplot (targetsPlot)
barplot (targetsV)
targetsV
targets
targetsV <- aggregate (targets[,(ncol(targets)-3)],  by = list (targets$Target), mean)
targetsV
targetsV
ncol(targets)
ncol(targets)-3
targetsV <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), mean)
targetsV
tdat<- mixedsort(targetsV[,1])
targetsV <- targetsV[match (tdat, targetsV[,1]),]
targetsCi <- aggregate (targets[,1:4],  by = list (targets$Target), ci)
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
rownames (targetsCi) <- NULL
colnames(targetsPlot)<- (targetsV[,1])
barplot (targetsV)
targetsV
tdat<- mixedsort(targetsV[,1])
tday
tdat
tdat<- mixedsort(as.character(targetsV[,1]))
targetsV <- targetsV[match (tdat, targetsV[,1]),]
targetsV
targetsCi <- aggregate (targets[,1:4],  by = list (targets$Target), ci)
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
rownames (targetsCi) <- NULL
#colnames(targetsPlot)<- (targetsV[,1])
barplot (targetsV)
targetsV
#colnames(targetsPlot)<- (targetsV[,1])
barplot (targetsV[,-1])
#colnames(targetsPlot)<- (targetsV[,1])
barplot (t(targetsV[,-1]))
#colnames(targetsPlot)<- (targetsV[,1])
barplot (t(targetsV))
#p <- barplot (targetsPlot[,1]) #only first target
targetsPlot <- t(targetsV[,-1])
colnames(targetsPlot)<- (targetsV[,1])
barplot (targetsPlot)
targets
unique (targets$Target)
targets <- dat[grep ('targ', rownames(dat)),]
targets
str (targets)
factor (targets)
factor (targets$Target)
factor (targets$Target) <- as.character (targets$Target)
factor (targets$Target) <- factor(as.character(targets$Target))
factor (targets$Target) <- as.factor(as.character(targets$Target))
factors (targets$Target) <- as.factor(as.character(targets$Target))
factors (targets$Target) <- (as.character(targets$Target))
factor (targets$Target) <- (as.character(targets$Target))
levels
levels (targets)
levels (targets$Target)
targets$Target <- factor (as.character(targets$Target),levels (targets$Target))
levels (targets$Target)
targets$Target <- factor (as.character(targets$Target),levels (as.character(targets$Target)))
levels (targets$Target)
targets$Target
targets <- dat[grep ('targ', rownames(dat)),]
targets$Target <- factor (targets$Target,levels (as.character(targets$Target)))
targets$Target
targets <- dat[grep ('targ', rownames(dat)),]
targets$Target <- factor(as.character(targets$Target), levels = c(as.character(targets$Target)))
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
targets$Target <- factor(as.character(targets$Target), levels = c(as.character(targets$Target)))
levels = c(as.character(targets$Target)
)
levels
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
levels
levels = c(as.character(targets$Target))
levels
targetsV
targets$Target
levels (targets)
factor (targets)
factor (targets$Target)
levels (targets$Target)
levels (targets$Target) <- c(as.character(uniqu(targets$Target[,1])))
levels (targets$Target) <- c(as.character(unique(targets$Target[,1])))
unique(targets$Target[,1])
unique(targets$Target)
levels (targets$Target) <- c(as.character(unique(targets$Target)))
levels (targets$Target)
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
levels (targets$Target) <- c(as.character(unique(targets$Target)))
targetsV <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), mean)
tdat<- mixedsort(as.character(targetsV[,1]))
targetsV <- targetsV[match (tdat, targetsV[,1]),]
targetsCi <- aggregate (targets[,1:4],  by = list (targets$Target), ci)
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
rownames (targetsCi) <- NULL
#p <- barplot (targetsPlot[,1]) #only first target
targetsPlot <- t(targetsV[,-1])
colnames(targetsPlot)<- (targetsV[,1])
barplot (targetsPlot)
unique (targets$Target)
unique (targets$Target)
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
levels (targets$Target) <- c(as.character(unique(targets$Target)))
targets
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
as.character(unique(targets$Target))
levels (targets)
targets
levels (targets$
)
levels (targets$Target)
n <- as.character (targets$Target)
levels (targets$Target) <- c(as.character(unique(targets$Target)))
targets$Target <- n
targets
levels (targets$Target)
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
n <- as.character (targets$Target)
levels (targets$Target) <- c(as.character(unique(targets$Target)))
targets$Target <- n
targets
targetsV <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), mean)
tdat<- mixedsort(as.character(targetsV[,1]))
targetsV <- targetsV[match (tdat, targetsV[,1]),]
targetsCi <- aggregate (targets[,1:4],  by = list (targets$Target), ci)
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
rownames (targetsCi) <- NULL
#p <- barplot (targetsPlot[,1]) #only first target
targetsPlot <- t(targetsV[,-1])
colnames(targetsPlot)<- (targetsV[,1])
barplot (targetsPlot)
unique (targets$Target)
targetsCi <- aggregate (targets[,ncol(targets)-3],  by = list (targets$Target), ci)
targetsCi
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
n <- as.character (targets$Target)
levels (targets$Target) <- c(as.character(unique(targets$Target)))
targets$Target <- n
targetsV <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), mean)
tdat<- mixedsort(as.character(targetsV[,1]))
targetsV <- targetsV[match (tdat, targetsV[,1]),]
targets
levels (targets$Target)
str (targets)
targetsCi <- aggregate (targets[,ncol(targets)-2],  by = list (targets$Target), ci)
targetsCi
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
targetsCi
targets
ci (targets[c(1,2), c(1:4)])
ci (targets[c(1,2),])
ci (targets[c(1,2)])
ci (targets[c(1,2),])
targets[c(1,2),]
apply (targets[c(1,2),], 2, ci)
apply (targets[c(1,2),c(1:4)], 2, ci)
targets$Target
targets$Target <- factor (targets$Target)
targetsCi <- aggregate (targets[,ncol(targets)-2],  by = list (targets$Target), ci)
targetsCi
str (targets)
#write.csv (dat, 'dat.csv')
dat <- read.csv ('dat.csv')
rownames (dat) <- dat[,1]
dat <- dat[,-1]
library (gmodels)
library (gtools)
targets <- dat[grep ('targ', rownames(dat)),]
n <- as.character (targets$Target)
levels (targets$Target) <- c(as.character(unique(targets$Target)))
targets$Target <- n
targetsV <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), mean)
targetsV
targets
tdat<- mixedsort(as.character(targetsV[,1]))
targetsV <- targetsV[match (tdat, targetsV[,1]),]
.targets
targets
aggregate (targets[,ncol(targets)-2],  by = list (targets$Target), ci)
aggregate (targets[,ncol(targets)-3],  by = list (targets$Target), ci)
getCi <- function (x) {
return (apply (x, 2, ci))
}
targetsCi
targets
getCi (targets[which(targets$Target == 'Target: 1'),])
getCi (targets[which(targets$Target == 'Target: 1'),c(1: ncol(targets)-2]))
getCi (targets[which(targets$Target == 'Target: 1'),c(1: ncol(targets)-2)])
targets[which(targets$Target == 'Target: 1']
targets[which(targets$Target == 'Target: 1'.]
targets[which(targets$Target == 'Target: 1',]
targets[which(targets$Target == 'Target: 1'),]
getCi (targets[which(targets$Target == 'Target: 1'),(1:(ncol(targets)-3))])
t(getCi (targets[which(targets$Target == 'Target: 1'),(1:(ncol(targets)-3))]))
targetsCi <- aggregate (targets[,(1:ncol(targets)-3)],  by = list (targets$Target), getCi)
targets$Target
targets[,(1:ncol(targets)-3)]
targets[,(1:(ncol(targets)-3))]
targetsCi <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), getCi)
targets[,(1:(ncol(targets)-3))]
aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target))
aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), mean)
aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), getCi)
getCi <- function (x) {
print (x)
return (apply (x, 2, ci))
}
targetsCi <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), getCi)
getCi <- function (x) {
x <- as.data.frame (x)
return (apply (x, 2, ci))
}
targetsCi <- aggregate (targets[,(1:(ncol(targets)-3))],  by = list (targets$Target), getCi)
targetsCi
t (targetsCi)
t (targetsCi[,-1])
t (targetsCi[,-1])
rownames (t (targetsCi[,-1]))
colnames (t (targetsCi[,-1]))
names (t (targetsCi[,-1]))
dat <- t (targetsCi[,-1])
dat
names (dat) <- targetsCi$Group.1
dat
dat <- t (targetsCi[,-1])
colnames (dat) <- targetsCi$Group.1
dat
targetsCi
targetsCi <- targetsCi[match (tdat, targetsCi[,1]),]
targetsCi
dat <- t (targetsCi[,-1])
colnames (dat) <- targetsCi$Group.1
dat
ci (targets$BANK)
?grepl
rownames (dat)
gsub ('1','es', rownames (dat))
rownames(dat) <- gsub ('1','es', rownames (dat))
rownames(dat)gsub ('2','ci.low', rownames (dat))
rownames(dat)gsub ('3','ci.up', rownames (dat))
rownames(dat)gsub ('4','sd.er', rownames (dat))
rownames(dat) <- gsub ('1','es', rownames (dat))
rownames(dat)<- gsub ('2','ci.low', rownames (dat))
rownames(dat)<- gsub ('3','ci.up', rownames (dat))
rownames(dat)<- gsub ('4','sd.er', rownames (dat))
dat
barplot (dat)
hist (dat)
barplot (Dat)
barplot (dat)
barplot (dat, col=c("chartreuse", "blue4", 'lightblue', 'lightsalmon'))
barplot (t(dat[,1]), col=c("chartreuse", "blue4", 'lightblue', 'lightsalmon'))
barplot (t(dat), col=c("chartreuse", "blue4", 'lightblue', 'lightsalmon'))
barplot (dat, col=c("chartreuse", "blue4", 'lightblue', 'lightsalmon'))
dat
cl1 <- dat[grep ('BANK', rownames(dat)),]
cl1
barplot (cl1, col=c("chartreuse", "blue4", 'lightblue', 'lightsalmon'))
barplot (t(cl1), col=c("chartreuse", "blue4", 'lightblue', 'lightsalmon'))
dat
plot (dat[,1])
barplot (dat[,1])
