dat <- target_function()
d <- dim(dat)
dat_output <- data.frame(matrix(100, nrow = d[1], ncol = (d[2] - 2)))
colnames(dat_output) <- names(dat)[-c(1, 2)]
dat_output <- dat_output[, -c(which(colnames(dat_output) %in% target_removed_function()[, 2]))]
rownames(dat_output) <- NULL
dat_output
}
)
mixingOutput <- eventReactive(input$ui_src_applymix, {
req(dfaList_x())
req(input$rbMix)
l <- corrected_function()[[1]]
DFA_l <- dfaList_x()
targetD <- as.data.frame(target_function())
finalDat <- NULL
if (input$rbMix == "all") {
} else {
l <- l[which(target_function()[, 1] %in% input$selected_targets)]
targetD <- targetD[which(targetD[, 1] %in% input$selected_targets), ]
DFA_l <- DFA_l[which(targetD[, 1] %in% input$selected_targets), ]
}
for (i in seq(1, length(l))) {
target <- targetD[i, -c(1, 2)]
DFA <- DFA_l[i, ]
x <- l[[i]]
uniSource <- unique(x[, 2])
uniSource <- as.character(uniSource)
ui_src_split <- input$ui_src_split
modelOutput <- NULL
print(paste0("Mixing source: ", i))
for (j in seq(1, input$mcsimulations)) {
inputTrain <- NULL
inputValidate <- NULL
for (i2 in seq(1, length(uniSource))) {
dat <- x[which(x[, 2] == uniSource[i2]), ]
train_index <- sample(1:nrow(dat), nrow(dat) * ui_src_split)
training_dat <- dat[train_index, ]
validate_dat <- dat[-train_index, ]
inputTrain <- rbind(inputTrain, training_dat)
inputValidate <- rbind(inputValidate, validate_dat)
}
datas <- getSubsetmean(inputTrain[, -1])
DFA <- DFA[(which(colnames(DFA) %in% colnames(datas)))]
DFA <- DFA[, colSums(DFA != 0) > 0]
target <- target[, which(names(target) %in% colnames(DFA))]
datas <- datas[, which(colnames(datas) %in% colnames(DFA))]
dat <- inputValidate [, -c(1, 2)]
dat <- dat[, which(names(dat) %in% colnames(DFA))]
dat <- rbind(dat, target)
if (any(dat == 0)) {
dat[dat == 0] <- 0.001
}
rownames(dat) <- c(as.character(inputValidate[, 1]), as.character(targetD[i, 1]))
# for (i3 in seq (1, nrow (dat))){
# output <- UseUnMixing(dat[i3,], datas, DFA, method = "Nelder-Mead")
# modelOutput <- rbind (modelOutput, output)
# }
cl <- makeCluster(numCores)
optimMix <- function(x) {
datas <- get("datas", envir = environment())
DFA <- get("DFA", envir = environment())
output <- UseUnMixing(x, datas, DFA, method = "Nelder-Mead")
}
clusterExport(cl, list("UseUnMixing", "datas", "DFA", "dat", "optimMix"), envir = environment())
output <- t(parApply(cl, dat, 1, optimMix))
output <- cbind(output, j)
modelOutput <- rbind(modelOutput, output)
stopCluster(cl)
}
modelOutput <- cbind(modelOutput, i)
finalDat <- rbind(finalDat, modelOutput)
finalDat <- round(finalDat, 3)
}
x <- as.data.frame(finalDat)
x[, (ncol(x) - 1)] <- paste0("Monte Carlo: ", x[, (ncol(x) - 1)])
x[, (ncol(x))] <- paste0("Target: ", x[, (ncol(x))])
colnames(x) <- c(uniSource, "GOF", "Monte-Carlo", "Target")
x
})
output$mixingOutput <- renderDT({
x <- as.data.frame(mixingOutput())
x
})
output$targetPlot <- renderUI({
req(mixingOutput())
dat <- as.data.frame(mixingOutput())
# print (dat)
datGloba_plot <<- dat
dat <- dat[grep("target", rownames(dat)), ]
un <- rownames(dat[which(rownames(dat) %in% as.character(target_function()[, 1])), ])
if (!is.null(input$selected_targets)) {
dat <- dat[which(rownames(dat) %in% input$selected_targets), ]
}
# selectInput('targetPlot', 'Select target', unique(dat[,ncol(dat)]), selected = NULL)
selectInput("targetPlot", "Select target", un, selected = NULL)
})
output$srcPlot <- renderUI ({
})
output$trg_mixing_plot <- renderPlot({
req(mixingOutput())
dat <- as.data.frame(mixingOutput())
dat <- dat[grep("target", rownames(dat)), ]
targNames <- rownames(dat)
targetSelected <- dat$Target[which(rownames(dat) %in% input$targetPlot)]
dat <- melt(dat)
# datmeltGlobal <<- dat
tryCatch({
# dat <- dat[which (dat[,2] == input$targetPlot),]
dat <- dat[which(dat[, 2] == targetSelected), ]
ggplot(dat, aes(factor(variable), value, colour = variable)) +
geom_violin(trim = FALSE) + geom_jitter(height = 0, width = 0.1) + geom_boxplot(width = 0.1, color = "black", alpha = 0.5) +
facet_wrap(~variable, ncol = 2, scales = "free")
}, warning = function(cond) {}, error = function(cond) {})
}, height = 400, width = 600)
output$src_mixing_plot <- renderPlot ({
req (mixingOutput ())
dat <- as.data.frame (mixingOutput ())
targs <- dat[grep("target", rownames(dat)), ]
dat <- dat[!which(rownames(dat) %in% rownames(targs))]
dat <- melt(dat)
print (dat)
})
output$radioBut <- renderUI({
radioButtons("rbMix", "Select mixing", choices = c("all", "subset"), selected = "all")
})
output$selectTarget <- renderUI({
req(input$rbMix)
# print (target_function())
if (input$rbMix == "all") { } else {
checkboxGroupInput("selected_targets", "Targets",
choices = unique(as.character(target_function()[, 1])), selected = unique(as.character(target_function()[, 1])), inline = FALSE,
width = NULL
)
}
})
output$corBut <- renderUI({
radioButtons(
"corBut", "Correct for any of the elements? :",
c(
"Correct" = "Cor",
"No" = "noCor"
),
selected = "Cor"
)
})
output$rbDFA <- renderUI({
radioButtons(
"rbDFA", "Apply DFA, default or uniform weights? :",
c(
"default" = "def",
"uniform" = "uni"
),
selected = "def"
)
})
output$verb1 <- renderText({"dat 1"})
output$verb2 <- renderText({"dat 2"})
}
# User interface side of the user input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "SedSat_ShinyV2"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem ('Input', tabName = 'dataInput', icon = icon ('upload')),
menuItem("Transformations & Outliers", icon = icon("upload"),
menuSubItem('TRANSFORMATION', tabName = 'Transformations'),
menuSubItem('OUTLIERS', tabName = 'Outliers')),
menuItem("Size & TOC Correction", tabName = "regressions", icon = icon("random")),
menuItem("Discriminant Function Analysis", tabName = "DFA", icon = icon("table")),
menuItem("Mixing Model", tabName = "mixmod", icon = icon("cubes"))
# ,
# menuItem("ML Model", tabName = "mlmod", icon = icon("circle"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
tabsetPanel(
tabPanel(
"Source",
fluidPage(
fluidRow(
sidebarLayout(
div(style="width: 50%;",
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file1", "User data (.csv format)"),
#DT_tab('dat1')
#DTOutput('src_dat'),
columnChooserUI("dat1")
)
), width =5)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("source_origin"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
navbarMenu(
"Plots",
tabPanel(
'Corplot',
fluidRow(
column(
width = 9,
br(),
srcCor("dat1")
),
column(
width = 3,
mat_par("dat1")
)
)
),
tabPanel(
'Distribution',
column(
width = 12,
br(),
srcDCor("dat1")
)
)
)
)
)
)
)
)
)
),
tabPanel(
"Target",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file2", "User data (.csv format)"),
columnChooserUI("dat2")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("trgs_origin"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat2")
),
column(
width = 3,
mat_par("dat2")
)
),
column(
width = 12,
br(),
srcDCor("dat2")
)
)
)
)
)
)
)
)
)
)
),
tabItem (
tabName = 'Transformations',
box(
title = ("Title"), status = "success", height = "auto", width = 12, solidHeader = T,
fluidPage(
title = 'Adjust elements',
sidebarLayout(
sidebarPanel (
shapiroP("dat1")
),
mainPanel (
column(
width = 12,
tabsetPanel (
tabPanel(
"Untransformed data, Shapiro-Wilk test p values for each source",
srcSP("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
)
)
)
)
)
),
tabItem(
tabName = 'Outliers',
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
downloadButton("downloadData", "Download"),
br(),
tags$hr(),
outliersTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabItem( # First tab content
tabName = "regressions",
tabsetPanel(
tabPanel(
"Sources",
column(
width = 12,
DTOutput("src_ref_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Target",
column(
width = 12,
DTOutput("trgs_origin_mdl"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Corrections",
sidebarLayout(
sidebarPanel(
uiOutput("corBut"),
uiOutput("ui_src_adjustfor"), # ,
uiOutput("ui_src_remove"),
uiOutput("ui_src_shapiro"),
uiOutput("ui_src_cor"),
uiOutput("ui_src_applycor")
),
mainPanel(
box(
title = "Available options", status = "success", height =
"auto", solidHeader = T, width = "auto",
withSpinner(DTOutput("src_corr_function")), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabPanel(
"Target corrected",
fluidRow(
column(
width = 12,
box(
title = "Formulas", status = "success", height =
"auto", solidHeader = T,
DTOutput("corr_formulas_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Selected", status = "primary", height =
"auto", solidHeader = T,
DTOutput("correct_formulas_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
column(
width = 12,
box(
title = "Top pick", status = "success", height =
"auto", solidHeader = T,
DTOutput("correct_formulasdef_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Plots", status = "success", height =
"auto", solidHeader = T,
uiOutput("ui_formulas_selected"),
uiOutput("ui_corvar_plot"),
plotOutput("regression_plot_output")
)
)
)
),
tabPanel(
"Corrected Data",
tabsetPanel(
tabPanel(
"Data",
column (
width = 12,
uiOutput("ui_src_targets"),
DTOutput("correct_src_selected_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
fluidRow(
column (
width = 12,
box (
title = 'Slopes', status = 'primary', height = 'auto', solideHeader = T,
DTOutput("correct_src_slopes_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box (
title = 'Dropped', status = 'warning', height = 'auto', solideHeader = T,
DTOutput("correct_src_drops_output"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabPanel(
"Plot",
uiOutput("xvar"),
uiOutput("yvar"),
scatterD3Output("scatterplot1")
)
)
),
tabPanel(
"Bracket test",
fluidPage(
uiOutput("brack_range"),
sidebarLayout(
sidebarPanel(
DTOutput("target_droplist_output"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
mainPanel(
DTOutput("targets_brackets_output"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
),
tabItem(
tabName = "DFA",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
uiOutput("rbDFA"),
actionButton("applyDFA", "Apply")
),
mainPanel(
column(
width = 12,
withSpinner(DTOutput("dfaList")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
),
tabItem(
tabName = "mixmod",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
uiOutput("ui_src_applymix"),
uiOutput("ui_src_split"),
uiOutput("radioBut"),
uiOutput("selectTarget"),
numericInput("mcsimulations", "Monte carlo simulations:", 2, min = 1, max = 1000)
),
mainPanel(
column(
width = 12,
withSpinner(DTOutput("mixingOutput")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;",
uiOutput("targetPlot"),
plotOutput("trg_mixing_plot", width = "100%")
#uiOutput ('srcPlot'),
#fluidRow (
# column(
#  width = 6,
)#,
#column(
# width =6,
# plotOutput ('src_mixing_plot', width = '100%')
#)
#)
)
)
)
)
)
)
)
)
# Run the app ----
shinyApp(ui, server)
