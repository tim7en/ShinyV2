x
})
output$mixingOutput <- renderDT({
x <- as.data.frame(mixingOutput())
x
})
output$targetPlot <- renderUI({
req(mixingOutput())
dat <- as.data.frame(mixingOutput())
# print (dat)
datGloba_plot <<- dat
dat <- dat[grep("target", rownames(dat)), ]
un <- rownames(dat[which(rownames(dat) %in% as.character(TTout()[, 1])), ])
if (!is.null(input$selected_targets)) {
dat <- dat[which(rownames(dat) %in% input$selected_targets), ]
}
# selectInput('targetPlot', 'Select target', unique(dat[,ncol(dat)]), selected = NULL)
selectInput("targetPlot", "Select target", un, selected = NULL)
})
output$viPlot <- renderPlot({
req(mixingOutput())
dat <- as.data.frame(mixingOutput())
dat <- dat[grep("target", rownames(dat)), ]
targNames <- rownames(dat)
# targGlobal <<- targNames
targetSelected <- dat$Target[which(rownames(dat) %in% input$targetPlot)]
# input$targetPlot
dat <- melt(dat)
# datmeltGlobal <<- dat
tryCatch({
# dat <- dat[which (dat[,2] == input$targetPlot),]
dat <- dat[which(dat[, 2] == targetSelected), ]
ggplot(dat, aes(factor(variable), value, colour = variable)) +
geom_violin(trim = FALSE) + geom_jitter(height = 0, width = 0.1) + geom_boxplot(width = 0.1, color = "black", alpha = 0.5) +
facet_wrap(~variable, ncol = 2, scales = "free")
}, warning = function(cond) {}, error = function(cond) {})
}, height = 400, width = 600)
output$radioBut <- renderUI({
radioButtons("rbMix", "Select mixing", choices = c("all", "subset"), selected = "all")
})
output$selectTarget <- renderUI({
req(input$rbMix)
# print (TTout())
if (input$rbMix == "all") { } else {
checkboxGroupInput("selected_targets", "Targets",
choices = unique(as.character(TTout()[, 1])), selected = unique(as.character(TTout()[, 1])), inline = FALSE,
width = NULL
)
}
})
output$corBut <- renderUI({
radioButtons(
"corBut", "Correct for any of the elements? :",
c(
"Correct" = "Cor",
"No" = "noCor"
),
selected = "Cor"
)
})
output$rbDFA <- renderUI({
radioButtons(
"rbDFA", "Apply DFA, default or uniform weights? :",
c(
"default" = "def",
"uniform" = "uni"
),
selected = "def"
)
})
}
# User interface side of the user input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "SedSat_ShinyV2"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "dataInput", icon = icon("upload")),
menuItem("Size & TOC Correction", tabName = "regressions", icon = icon("random")),
menuItem("Discriminant Function Analysis", tabName = "DFA", icon = icon("table")),
menuItem("Mixing Model", tabName = "mixmod", icon = icon("cubes")) # ,
# menuItem("ML Model", tabName = "mlmod", icon = icon("circle"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
tabsetPanel(
tabPanel(
"Source",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file1", "User data (.csv format)"),
columnChooserUI("dat1")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("DT"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat1")
),
column(
width = 3,
mat_par("dat1")
),
column(
width = 12,
br(),
srcDCor("dat1")
)
)
)
)
)
)
)
),
tabsetPanel(
tabPanel(
"Original Data p-values",
box(
title = textOutput("origTitle"), status = "success", height = "630", width = 12, solidHeader = T,
column(
width = 12,
srcSP("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"Transformations Advanced",
tabsetPanel(
tabPanel(
"Methods",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspMethods("dat1"),
style = "height:550px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Transformed p-values",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspPval("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"QQ Plots",
box(
title = "QQ plot of Original Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
spPlotpick("dat1")
),
getorigQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;",
column(
width = 6
)
),
box(
title = "QQ plot of Transformed Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
shapiroP("dat1")
),
getspQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;", # 570
column(
width = 6
)
)
)
)
),
tabPanel(
"Outliers",
fluidPage(
fluidRow(
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
downloadButton("downloadData", "Download"),
br(),
tags$hr(),
outliersTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
),
tabPanel(
"Outliers Advanced",
tabsetPanel(
tabPanel(
"Transformed Data & Outliers",
box(
title = "Data: Transformed ", status = "warning", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Edit Table To Keep/Remove Outliers",
box(
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: green;}")),
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-grid-text { font-size: 10pt;}")),
nStd("dat1"),
title = "Select Or Deselect Rows ", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab2("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
box(
title = "Standard Normal Deviate", status = "success", height = "600", width = 12, solideHeader = T,
column(
width = 12,
stdTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Outliers Removed",
box(
title = "These Rows Will Be Excluded From Final Output ", status = "danger", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab3("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Final Output",
box(
title = "Final Output Table", status = "success", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
br(),
downloadButton("downloadData2", "Download"),
tags$hr(),
outliersADtab4("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
),
tabPanel(
"Target",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file2", "User data (.csv format)"),
columnChooserUI("dat2")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("TD"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat2")
),
column(
width = 3,
mat_par("dat2")
)
),
column(
width = 12,
br(),
srcDCor("dat2")
)
)
)
)
)
)
)
)
)
)
),
tabItem( # First tab content
tabName = "regressions",
tabsetPanel(
tabPanel(
"Sources",
column(
width = 12,
DTOutput("DT_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Target",
column(
width = 12,
DTOutput("TD_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Corrections",
sidebarLayout(
sidebarPanel(
uiOutput("corBut"),
uiOutput("selcCor"), # ,
uiOutput("selcRem"),
uiOutput("shapiroP"),
uiOutput("corR"),
uiOutput("applyCor")
),
mainPanel(
box(
title = "Available options", status = "success", height =
"auto", solidHeader = T, width = "auto",
withSpinner(DTOutput("convOptions")), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabPanel(
"Target corrected",
fluidRow(
column(
width = 12,
box(
title = "Formulas", status = "success", height =
"auto", solidHeader = T,
DTOutput("fDt"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Selected", status = "primary", height =
"auto", solidHeader = T,
DTOutput("finalDtrg"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
column(
width = 12,
box(
title = "Top pick", status = "success", height =
"auto", solidHeader = T,
DTOutput("topPick"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Plots", status = "success", height =
"auto", solidHeader = T,
uiOutput("selDat"),
uiOutput("selVarplot"),
plotOutput("regPlot")
)
)
)
),
tabPanel(
"Corrected Data",
tabsetPanel(
tabPanel(
"Data",
fluidRow(
column(
width = 12,
uiOutput("trgS"),
DTOutput("tabList"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column(
width = 6,
DTOutput("tabLslopes"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column(
width = 6,
DTOutput("tabLdrops"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Plot",
uiOutput("xvar"),
uiOutput("yvar"),
scatterD3Output("scatterplot1")
)
)
),
tabPanel(
"Bracket test",
fluidPage(
uiOutput("brack_range"),
sidebarLayout(
sidebarPanel(
DTOutput("trg.drops"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
# shinyTree("tree",
#   checkbox = TRUE, search = TRUE, theme = "proton", themeIcons = F,
#   themeDots = F
# ),
# uiOutput('treeAcc')
),
mainPanel(
DTOutput("trgBrkts"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
) # ,
# DTOutput("trg.drops")
)
)
),
tabItem(
tabName = "DFA",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
uiOutput("rbDFA"),
actionButton("applyDFA", "Apply")
),
mainPanel(
column(
width = 12,
withSpinner(DTOutput("dfaList")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
),
tabItem(
tabName = "mixmod",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
uiOutput("applyMix"),
uiOutput("split"),
uiOutput("radioBut"),
uiOutput("selectTarget"),
numericInput("mcsimulations", "Monte carlo simulations:", 2, min = 1, max = 1000)
),
mainPanel(
column(
width = 12,
withSpinner(DTOutput("mixingOutput")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;",
uiOutput("targetPlot"),
plotOutput("viPlot", width = "100%")
)
)
)
)
)
)
)
)
)
# Run the app ----
shinyApp(ui, server)
