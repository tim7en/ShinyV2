x <- tarBrackets()[[1]]
x[, 1] <- as.character(x[, 1])
y <- sourceList
for (i in seq(1, nrow(d))) {
drops <- d[, 2][which(d[, 1] == d[, 1][i])]
dat <- y[[which(x[, 1] == d[, 1][i])]]
y[[which(x[, 1] == d[, 1][i])]] <- dat[, which(!names(dat) %in% c(drops))]
}
dat <- stepwiseDFA(y)
dat
})
dfaList_x <- reactive({
req(dfaReactive())
req(TTout())
datas <- dfaReactive()
dfaList <- NULL
sourceList <- datas
targetList <- TTout()
for (i in seq(1, nrow(targetList))) {
dfa <- data.frame(matrix(data = 0, nrow = 1, ncol = (length(colnames(targetList)) - 2)))
names(dfa) <- names(targetList)[-c(1, 2)]
datas_i <- datas[[i]]
datas_i <- t(datas_i)
dfa[, match(datas_i[1, ], names(dfa))] <- as.numeric(datas_i[3, ])
dfaList <- rbind(dfaList, dfa)
}
dfaList
})
output$dfaList <- renderDT(
dfaList_x()
)
mixingOutput <- eventReactive(input$applyMix, {
req(dfaList_x())
l <- outputCorrected()[[1]]
DFA_l <- dfaList_x()
targetD <- as.data.frame(TTout())
finalDat <- NULL
for (i in seq (1, length (l))){
target <- targetD[i,-c(1,2)]
DFA <- DFA_l[i,]
x <- l[[i]]
uniSource <- unique (x[,2])
split <- input$split
modelOutput <- NULL
print (paste0('Done with source: ', i))
for (j in seq (1,input$mcsimulations)){
inputTrain <- NULL
inputValidate <- NULL
for (i2 in seq (1, length (uniSource))){
dat <- x[which (x[,2] == uniSource[i2]),]
train_index <- sample(1:nrow(dat), nrow(dat) * split)
training_dat <- dat[train_index,]
validate_dat <- dat[-train_index,]
inputTrain <- rbind (inputTrain, training_dat)
inputValidate <- rbind (inputValidate, validate_dat)
}
datas <- getSubsetmean (inputTrain[,-1])
DFA <- DFA[(which(colnames(DFA) %in% colnames(datas)))]
DFA <- DFA[, colSums(DFA != 0) > 0]
target <- target[, which(names(target) %in% colnames(DFA))]
datas <- datas[, which(colnames(datas) %in% colnames(DFA))]
dat <- inputValidate [,-c(1,2)]
dat <- dat[,which(names(dat) %in% colnames (DFA))]
dat <- rbind (dat, target)
if (any(dat == 0)) {dat[dat==0]<- 0.001}
rownames (dat) <- c(as.character(inputValidate[,1]), as.character(targetD[i,1]))
#for (i3 in seq (1, nrow (dat))){
#output <- UseUnMixing(dat[i3,], datas, DFA, method = "Nelder-Mead")
#modelOutput <- rbind (modelOutput, output)
#}
cl <- makeCluster(numCores)
optimMix <- function (x) {
datas <- get ('datas', envir = environment())
DFA <- get ('DFA', envir = environment())
output <- UseUnMixing(x, datas, DFA, method = "Nelder-Mead")
}
clusterExport(cl, list ('UseUnMixing', 'datas', 'DFA', 'dat', 'optimMix'), envir=environment())
#print (paste0('Started model: ', j))
output <- t(parApply(cl, dat, 1, optimMix))
modelOutput <- rbind (modelOutput, output)
#print (paste0('Done model: ', j))
stopCluster(cl)
}
finalDat <- rbind (finalDat, modelOutput)
}
round(finalDat, 3)
})
output$mixingOutput <- renderDT({
mixingOutput()
})
}
# User interface side of the user input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "SedSat_ShinyV2"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "dataInput", icon = icon("upload")),
menuItem("Size & TOC Correction", tabName = "regressions", icon = icon("random")),
menuItem("Discriminant Function Analysis", tabName = "DFA", icon = icon("table")),
menuItem("Mixing Model", tabName = "mixmod", icon = icon("cubes")) # ,
# menuItem("ML Model", tabName = "mlmod", icon = icon("circle"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
tabsetPanel(
tabPanel(
"Source",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file1", "User data (.csv format)"),
columnChooserUI("dat1")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("DT"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat1")
),
column(
width = 3,
mat_par("dat1")
),
column(
width = 12,
br(),
srcDCor("dat1")
)
)
)
)
)
)
)
),
tabsetPanel(
tabPanel(
"Original Data p-values",
box(
title = textOutput("origTitle"), status = "success", height = "630", width = 12, solidHeader = T,
column(
width = 12,
srcSP("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"Transformations Advanced",
tabsetPanel(
tabPanel(
"Methods",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspMethods("dat1"),
style = "height:550px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Transformed p-values",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspPval("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"QQ Plots",
box(
title = "QQ plot of Original Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
spPlotpick("dat1")
),
getorigQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;",
column(
width = 6
)
),
box(
title = "QQ plot of Transformed Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
shapiroP("dat1")
),
getspQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;", # 570
column(
width = 6
)
)
)
)
),
tabPanel(
"Outliers",
fluidPage(
fluidRow(
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
downloadButton("downloadData", "Download"),
br(),
tags$hr(),
outliersTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
),
tabPanel(
"Outliers Advanced",
tabsetPanel(
tabPanel(
"Transformed Data & Outliers",
box(
title = "Data: Transformed ", status = "warning", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Edit Table To Keep/Remove Outliers",
box(
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: green;}")),
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-grid-text { font-size: 10pt;}")),
nStd("dat1"),
title = "Select Or Deselect Rows ", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab2("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
box(
title = "Standard Normal Deviate", status = "success", height = "600", width = 12, solideHeader = T,
column(
width = 12,
stdTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Outliers Removed",
box(
title = "These Rows Will Be Excluded From Final Output ", status = "danger", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab3("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Final Output",
box(
title = "Final Output Table", status = "success", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
br(),
downloadButton("downloadData2", "Download"),
tags$hr(),
outliersADtab4("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
),
tabPanel(
"Target",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file2", "User data (.csv format)"),
columnChooserUI("dat2")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("TD"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat2")
),
column(
width = 3,
mat_par("dat2")
)
),
column(
width = 12,
br(),
srcDCor("dat2")
)
)
)
)
)
)
)
)
)
)
),
tabItem( # First tab content
tabName = "regressions",
tabsetPanel(
tabPanel(
"Sources",
column(
width = 12,
DTOutput("DT_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Target",
column(
width = 12,
DTOutput("TD_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Corrections",
sidebarLayout(
sidebarPanel(
uiOutput("selcCor"), # ,
uiOutput("selcRem"),
uiOutput("shapiroP"),
uiOutput("corR"),
uiOutput("applyCor")
),
mainPanel(
box(
title = "Available options", status = "success", height =
"auto", solidHeader = T, width = "auto",
withSpinner(DTOutput("convOptions")), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabPanel(
"Target corrected",
fluidRow(
column(
width = 12,
box(
title = "Formulas", status = "success", height =
"auto", solidHeader = T,
DTOutput("fDt"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Selected", status = "primary", height =
"auto", solidHeader = T,
DTOutput("finalDtrg"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
column(
width = 12,
box(
title = "Top pick", status = "success", height =
"auto", solidHeader = T,
DTOutput("topPick"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Plots", status = "success", height =
"auto", solidHeader = T,
uiOutput("selDat"),
uiOutput("selVarplot"),
plotOutput("regPlot")
)
)
)
),
tabPanel(
"Corrected Data",
tabsetPanel(
tabPanel(
"Data",
fluidRow(
column(
width = 12,
uiOutput("trgS"),
DTOutput("tabList"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column(
width = 6,
DTOutput("tabLslopes"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column(
width = 6,
DTOutput("tabLdrops"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Plot",
uiOutput("xvar"),
uiOutput("yvar"),
scatterD3Output("scatterplot1")
)
)
),
tabPanel(
"Bracket test",
fluidPage(
uiOutput("brack_range"),
sidebarLayout(
sidebarPanel(
DTOutput("trg.drops"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
# shinyTree("tree",
#   checkbox = TRUE, search = TRUE, theme = "proton", themeIcons = F,
#   themeDots = F
# ),
# uiOutput('treeAcc')
),
mainPanel(
DTOutput("trgBrkts"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)#,
#DTOutput("trg.drops")
)
)
),
tabItem(
tabName = "DFA",
fluidPage(
fluidRow(
column(
width = 12,
withSpinner(DTOutput("dfaList")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabItem(
tabName = "mixmod",
fluidPage(
fluidRow(
column(
width = 12,
uiOutput ('applyMix'),
uiOutput ('split'),
numericInput("mcsimulations", "Monte carlo simulations:", 2, min = 1, max = 1000),
withSpinner(DTOutput("mixingOutput")), style = "height:auto; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
# Run the app ----
shinyApp(ui, server)
