#click_callback = "function(id, index) {
#  alert('scatterplot ID: ' + id + ' - Point index: ' + index)
#  }",
transitions= T)
})
output$brack_range <- renderUI ({
sliderInput ('brack_rng', 'Bracket range parameter', value = 0.1, min = 0, max = 3, step = 0.05)
})
tarBrackets <- reactive({
req (outputCorrected ())
req (TTout())
req (input$brack_rng)
x <- outputCorrected ()[[1]] #list of sources corrected
datas <- DT_p2()
datas <- datas[, which(!names(datas) %in% names(x[[1]]))]
y <- trgs() #list of targets corrected
dat <- NULL
trg <- NULL
for (i in seq (1,nrow(y))){
x[[i]]<- cbind (x[[i]], datas)
l <- bracketT (x[[i]],y[i,], input$brack_rng, input$slcR)
dat <- rbind (dat, l[[1]])
trg <- c (trg, l[[2]])
}
dat[,1] <- factor (as.character(dat[,1]), levels = c(as.character(dat[,1])))
return (list(dat, trg))
})
output$trgBrkts <- renderDT ({
req (tarBrackets ())
dat <- tarBrackets ()
selection <- dat[[2]]
#trgDat <<- dat
DT::datatable(dat[[1]]) %>% formatStyle(
c(colnames(dat[[1]])),
backgroundColor = styleEqual(selection, rep("lightsalmon", length(selection)))
)
})
trgdropList <- reactive ({
dat <- tarBrackets ()
x <- dat[[1]]
grepL <- function(x) {
return(grep("*", x, fixed = T))
}
trg <- list()
for (i in seq(1, nrow(x))) {
k <- (colnames(x)[grepL(x[i, ])])
if (length(k) == 0) {
trg[[i]] <- "None"
}
else {
trg[[i]] <- k
}
}
names(trg) <- x$SampleName
trg
})
output$tree <- renderTree({
atatrib <- function(x) {
structure(x, stselected = TRUE)
}
trg <- trgdropList()
#trg <- lapply(trg, atatrib)
trg <- (list("bigtree" = (trg)))
vL <- NULL
k <- 1
for (i in seq(1, length(trg$bigtree))) {
v <- paste("trg$bigtree$target", paste(i, "$", sep = ""), sep = "")
for (j in seq(1, length(trg$bigtree[[i]]))) {
vName <- paste(v, trg$bigtree[[i]][j], sep = "")
vName <- paste(vName, paste(" <- ", j, sep = ""), sep = "")
vL[k] <- vName
k <- k + 1
}
}
for (i in seq(1, length(vL))) {
options(warn = -1)
eval(parse(text = vL[i]))
options(warn = 1)
}
atatrib <- function(x) {
x[which(names(x) == "")] <- NULL
if (any(names(x) == "None")) {
structure(x, stselected = FALSE)
} else {
structure(x, stselected = TRUE)
}
}
trg <- lapply(trg$bigtree, atatrib)
trg
})
observe (
if (!is.null(input$tree)){
l <- names(unlist(get_selected(input$tree, format = c("slices"))))
d <- NULL
if (!is.null(l)){
for (i in seq (1, length (l))) {
d <- rbind (d,unlist(strsplit(l[i], "[.]")) )
}
d<- d[-c(which (d[,1] == d[,2])),]
}
output$trg.drops <- renderDT ({
if (!is.null (d)){
d
} else {
}
})
}
)
}
# User interface side of the user input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "SedSat_ShinyV2"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "dataInput", icon = icon("upload")),
menuItem("Size & TOC Correction", tabName = "regressions", icon = icon("random")),
menuItem("Discriminant Function Analysis", tabName = "DFA", icon = icon("table")),
menuItem("Mixing Model", tabName = "mixmod", icon = icon("cubes")) # ,
# menuItem("ML Model", tabName = "mlmod", icon = icon("circle"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
tabsetPanel(
tabPanel(
"Source",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file1", "User data (.csv format)"),
columnChooserUI("dat1")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("DT"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat1")
),
column(
width = 3,
mat_par("dat1")
),
column(
width = 12,
br(),
srcDCor("dat1")
)
)
)
)
)
)
)
),
tabsetPanel(
tabPanel(
"Original Data p-values",
box(
title = textOutput("origTitle"), status = "success", height = "630", width = 12, solidHeader = T,
column(
width = 12,
srcSP("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"Transformations Advanced",
tabsetPanel(
tabPanel(
"Methods",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspMethods("dat1"),
style = "height:550px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Transformed p-values",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
getspPval("dat1"),
style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"QQ Plots",
box(
title = "QQ plot of Original Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
spPlotpick("dat1")
),
getorigQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;",
column(
width = 6
)
),
box(
title = "QQ plot of Transformed Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
shapiroP("dat1")
),
getspQQval("dat1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;", # 570
column(
width = 6
)
)
)
)
),
tabPanel(
"Outliers",
fluidPage(
fluidRow(
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
downloadButton("downloadData", "Download"),
br(),
tags$hr(),
outliersTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
),
tabPanel(
"Outliers Advanced",
tabsetPanel(
tabPanel(
"Transformed Data & Outliers",
box(
title = "Data: Transformed ", status = "warning", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Edit Table To Keep/Remove Outliers",
box(
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: green;}")),
# tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-grid-text { font-size: 10pt;}")),
nStd("dat1"),
title = "Select Or Deselect Rows ", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab2("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
box(
title = "Standard Normal Deviate", status = "success", height = "600", width = 12, solideHeader = T,
column(
width = 12,
stdTab1("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Outliers Removed",
box(
title = "These Rows Will Be Excluded From Final Output ", status = "danger", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
outliersADtab3("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Final Output",
box(
title = "Final Output Table", status = "success", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
br(),
downloadButton("downloadData2", "Download"),
tags$hr(),
outliersADtab4("dat1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
),
tabPanel(
"Target",
fluidPage(
fluidRow(
sidebarLayout(
sidebarPanel(
fluidRow(
column(
width = 12,
csvFileInput("file2", "User data (.csv format)"),
columnChooserUI("dat2")
)
)
),
mainPanel(
fluidRow(
tabsetPanel(
tabPanel(
"Data",
column(
width = 12,
DTOutput("TD"),
style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Plots",
fluidRow(
column(
width = 9,
br(),
srcCor("dat2")
),
column(
width = 3,
mat_par("dat2")
)
),
column(
width = 12,
br(),
srcDCor("dat2")
)
)
)
)
)
)
)
)
)
)
),
tabItem( # First tab content
tabName = "regressions",
tabsetPanel(
tabPanel(
"Sources",
column(
width = 12,
DTOutput("DT_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Target",
column(
width = 12,
DTOutput("TD_p2"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Corrections",
sidebarLayout(
sidebarPanel(
uiOutput("selcCor"), # ,
uiOutput("selcRem"),
uiOutput("shapiroP"),
uiOutput("corR"),
uiOutput("applyCor")
),
mainPanel(
box(
title = "Available options", status = "success", height =
"auto", solidHeader = T, width = "auto",
withSpinner(DTOutput("convOptions")), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabPanel(
"Target corrected",
fluidRow(
column(
width = 12,
box(
title = "Formulas", status = "success", height =
"auto", solidHeader = T,
DTOutput("fDt"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Selected", status = "primary", height =
"auto", solidHeader = T,
DTOutput("finalDtrg"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
),
column(
width = 12,
box(
title = "Top pick", status = "success", height =
"auto", solidHeader = T,
DTOutput("topPick"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
box(
title = "Plots", status = "success", height =
"auto", solidHeader = T,
uiOutput("selDat"),
uiOutput("selVarplot"),
plotOutput("regPlot")
)
)
)
),
tabPanel(
"Corrected Data",
tabsetPanel(
tabPanel (
'Data',
fluidRow (
column(
width = 12,
uiOutput("trgS"),
DTOutput("tabList"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column (
width = 6,
DTOutput("tabLslopes"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
),
column (
width = 6,
DTOutput("tabLdrops"), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel (
'Plot',
uiOutput ('xvar'),
uiOutput ('yvar'),
scatterD3Output("scatterplot1")
)
)
),
tabPanel(
"Bracket test",
fluidPage(
uiOutput ('brack_range'),
sidebarLayout(
sidebarPanel(
shinyTree("tree", checkbox = TRUE, search = TRUE, theme = 'proton', themeIcons = F,
themeDots = F)
),
mainPanel(
DTOutput ('trgBrkts'), style = "height:'auto'; overflow-y: scroll;overflow-x: scroll;"
)
)
),
DTOutput ('trg.drops')
)
)
)
),
tabItems(
tabItem( # First tab content
tabName = "DFA",
tabsetPanel()
)
),
tabItems(
tabItem( # First tab content
tabName = "mixmod",
tabsetPanel()
)
)
)
)
# Run the app ----
shinyApp(ui, server)
